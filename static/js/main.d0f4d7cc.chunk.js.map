{"version":3,"sources":["reportWebVitals.js","components/ReportGridEditableCell/index.tsx","components/ReportGrid/index.tsx","pages/App/index.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","withSizeHOC","withSize","ReportGridEditableCellCore","props","editor","render","editing","Card","className","classes","reportWidget","InlineEditor","data","state","onReady","console","log","onChange","event","getData","setState","clsx","widgetView","dangerouslySetInnerHTML","__html","React","Component","ReportGridEditableCell","withStyles","height","paddingLeft","paddingRight","ReportGridCore","layout","i","x","y","w","h","static","minW","maxW","layouts","lg","width","size","breakpoints","md","sm","xs","xxs","cols","isDraggable","ReportGrid","useStyles","makeStyles","theme","root","display","toolbar","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","up","appBarSpacer","content","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","App","useState","open","setOpen","setEditing","CssBaseline","AppBar","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","component","variant","noWrap","Badge","badgeContent","Drawer","style","FormGroup","row","FormControlLabel","control","Switch","checked","name","label","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0f4d7cc.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n// @ts-ignore\nimport { Responsive } from 'react-grid-layout';\nimport clsx from 'clsx';\nimport { withSize } from 'react-sizeme'\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n// @ts-ignore\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n// @ts-ignore\nimport InlineEditor from '@ckeditor/ckeditor5-build-inline';\n\nimport './styles.css';\n\nconst styles = {\n  reportWidget: {\n    height: 'inherit',\n  },\n  widgetView: {\n    paddingLeft: '0.6em',\n    paddingRight: '0.6em'\n  }\n};\n\nconst withSizeHOC = withSize()\n\nexport class ReportGridEditableCellCore extends React.Component<{ classes: any, size: any, key: string, editing: boolean }, { data: string }> {\n\n  private editor = null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: \"<p>Hello!<p>\"\n    }\n  }\n\n  /*\n  componentDidUpdate = () => {\n    if (this.editor !== null) {\n      // @ts-ignore\n      this.editor.ui.view.editable.editableElement.style.height = this.props.size.height;\n    }\n  }*/\n\n  render = () => {\n    if (this.props.editing) {\n      return (\n        <Card className={this.props.classes.reportWidget}>\n          <CKEditor\n            editor={ InlineEditor }\n            data={this.state.data}\n            onReady={ (editor: any) => {\n                // You can store the \"editor\" and use when it is needed.\n                console.log( 'Editor is ready to use!', editor );\n                this.editor = editor;\n            } }\n            onChange={ ( event: any, editor: any ) => {\n                const data = editor.getData();\n                console.log( { event, editor, data } );\n                this.setState({data: data});\n            } }\n          />\n        </Card>\n      )\n    } else {\n      return (\n        <Card className={clsx(this.props.classes.reportWidget, this.props.classes.widgetView)}>\n          <div className=\"ck-content\" dangerouslySetInnerHTML={{__html: this.state.data}} />\n        </Card>\n      )\n    }\n  }\n}\n\nexport const ReportGridEditableCell = withStyles(styles)(withSizeHOC(ReportGridEditableCellCore));","import React from 'react';\n// @ts-ignore\nimport { Responsive } from 'react-grid-layout';\nimport { withSize } from 'react-sizeme'\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n// @ts-ignore\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n// @ts-ignore\nimport InlineEditor from '@ckeditor/ckeditor5-build-inline';\n\nimport { ReportGridEditableCell } from '../ReportGridEditableCell';\n\nconst styles = {\n  reportWidget: {\n    height: 'inherit'\n  }\n};\n\nconst withSizeHOC = withSize()\n\nexport class ReportGridCore extends React.Component<{ classes: any, size: any, editing: boolean }> {\n\n  private layout = [\n    {i: 'a', x: 0, y: 0, w: 1, h: 2, static: true},\n    {i: 'b', x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4},\n    {i: 'c', x: 4, y: 0, w: 1, h: 2}\n  ];\n\n  private layouts = { lg: this.layout };\n\n  private editor = null;\n\n  render = () => {\n    return (\n      <Responsive\n        className=\"layout\"\n        width={this.props.size.width}\n        layouts={this.layouts}\n        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\n        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n        isDraggable={!this.props.editing}\n      >\n        <div key=\"a\">\n          <ReportGridEditableCell key=\"a\" editing={this.props.editing}/>\n        </div>\n        <div key=\"b\">\n          <ReportGridEditableCell key=\"b\" editing={this.props.editing}/>\n        </div>\n        <div key=\"c\">\n          <ReportGridEditableCell key=\"c\" editing={this.props.editing}/>\n        </div>\n      </Responsive>\n    )\n  }\n}\n\nexport const ReportGrid = withStyles(styles)(withSizeHOC(ReportGridCore));","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\n// @ts-ignore\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n// @ts-ignore\nimport DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document';\n\nimport { ReportGrid } from '../../components/ReportGrid';\nimport { FormGroup, FormControlLabel, Switch } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const [editing, setEditing] = React.useState(false);\n  const [editor, setEditor] = React.useState(null);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Reports\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <div className={classes.container}>\n          <div style={{paddingLeft: '8px'}}>\n            <FormGroup row>\n              <FormControlLabel\n              control={\n                <Switch\n                  checked={editing}\n                  onChange={() => setEditing(!editing)}\n                  name=\"editing\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Edit Mode\"\n              />\n            </FormGroup>\n          </div>\n          <ReportGrid editing={editing} />\n        </div>\n      </main>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './pages/App';\n\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}